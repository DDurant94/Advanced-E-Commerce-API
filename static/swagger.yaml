swagger: '2.0'
info:
  title: "E-Commerce API"
  description: "This is an API to manage an E-Commerce application"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:

  /customers:
    get:
      tags:
        - customers
      summary: "Get All Customers"
      description: "Retrieve a list of all customers"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
          examples:
            application/json:
              - id: 1
                name: "Jane Doe"
                email: "jdoe@email.com"
                phone: "1234567890"
        401:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customers/id/{id}:
    get:
      tags:
      - "customers"
      summary: "Find customer by ID"
      description: "Get customer by ID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Customer"
          examples:
            application/json:
              id: 1
              name: "Jane Doe"
              email: "jdoe@email.com"
              phone: "1234567890"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customers/add-customer:
    post:
      tags:
        - "customers"
      summary: "Add a Customers Endpoint"
      description: "Add a new Customer"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer data"
          required: true
          schema:
            $ref: "#/definitions/CustomerCredentials"
      responses:
        201:
          description: "Successful response"
          schema:
            items:
              $ref: "#/definitions/Customer"
          examples:
            application/json:
              id: 1
              name: "Jane Doe"
              email: "jdoe@email.com"
              phone: "1234567890"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        400:
          description: "Validation Error | Fallback Error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Unknown field. Missing data for required field. | Fallback method error activated"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customers/update/id/{id}:
    put:
      tags:
      - "customers"
      summary: "Update an existing customer"
      description: "Update customer by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Customer object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        201:
          description: "Customer updated"
          schema:
            $ref: "#/definitions/Customer"
          examples:
            application/json:
              id: 1
              name: "Jane Doe"
              email: "jdoe@email.com"
              phone: "1234567890"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"

      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customers/delete/id/{id}:
    delete:
      tags:
      - "customers"
      summary: "Delete a customer"
      description: "Delete customer by ID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Customer deleted"
          schema:
            $ref: "#/definitions/DeleteResponse"
          examples:
            application/json:
              message: "Customer removed successfully"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "Couldn't find customer with ID {id}"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']


  /customer-accounts/:
    get:
      tags:
      - "accounts"
      summary: "Find all customer accounts"
      description: "Getting all customer accounts"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CustomerAccount"
          examples:
            application/json:
              - id: 1
                username: "JDoe123"
                password: "scrypt:32768:8:1$yAzFpqAGIjKbacf9fc..."
                customer_id: 1
                role: "admin"
                customer:
                  name: "Jane Doe"
                  email: "jdoe@email.com"
                  phone: "1234567890"
                  id: 1

              
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customer-accounts/id/{id}:
    get:
      tags:
      - "accounts"
      summary: "Find customer account by ID"
      description: "Finding customer account by ID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CreateAccountResponse"
          examples:
            application/json:
              customer:
                name: "Jane Doe"
                email: "jdoe@email.com"
                phone: "1234567890"
                id: 1
              username: "JDoe123"
              password: "scrypt:32768:8:1$yAzFpqAGIjKbacf9fc..."
              customer_id: 1
              role: "admin"
              id: 1
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customer-accounts/create-account:
    post:
      tags:
      - "accounts"
      summary: "Save a new customer account"
      description: "Creating new customer account"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer account object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CustomerAccount"
      responses:
        201:
          description: "Customer account created"
          schema:
            $ref: "#/definitions/CustomerAccount"
          examples:
            application/json:
              id: 1
              username: "JDoe123"
              password: "scrypt:32768:8:1$yAzFpqAGIjKbacf9fc..."
              customer_id: 1
              role: "admin"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /customer-accounts/login:
    post:
      tags:
        - "accounts"
      summary: "Login endpoint"
      description: "Endpoint for user authentication."
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              value:
                auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "Login successful"
                status: "success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Invalid credentials"

  /customer-accounts/update/id/{id}:
    put:
      tags:
      - "accounts"
      summary: "Update an existing customer account"
      description: "Updating customer account by account id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Customer account object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/CustomerAccount"
      responses:
        201:
          description: "Customer account updated"
          schema:
            $ref: "#/definitions/CustomerAccount"
          examples:
            application/json:
              id: 1
              username: "JDoe123"
              password: "scrypt:32768:8:1$yAzFpqAGIjKbacf9fc..."
              customer_id: 1
              role: "admin"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']
            
  /customer-accounts/delete/id/{id}:
    delete:
      tags:
      - "accounts"
      summary: "Delete a customer account"
      description: "Deleting account by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Customer account deleted"
          schema:
            $ref: "#/definitions/DeleteResponse"
          examples:
            application/json:
              message: "Customer removed successfully"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              message: "Couldn't find customer with ID {id}"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']


  /products/:
    get:
      tags:
        - "products"
      summary: "Get All Products Endpoint"
      description: "Retrieve a list of all products"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number"
          required: false
          type: "integer"
          default: 1
        - name: "per_page"
          in: "query"
          description: "Number of items per page"
          required: false
          type: "integer"
          default: 10
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
          examples:
            application/json:
              - id: 1
                name: "shoes"
                price: 20.99
                quantity: 200
                description: "nice pair of running shoes"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
      security:
        - bearerAuth: []

  /products/id/{id}:
    get:
      tags:
      - "products"
      summary: "Find product by ID"
      description: "Get product by ID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Product"
          examples:
            application/json:
              id: 1
              name: "shoes"
              price: 20.99
              quantity: 200
              description: "nice pair of running shoes"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
      security:
        - bearerAuth: []

  /products/add-product:
    post:
      tags:
        - "products"
      summary: "Add a New Product Endpoint"
      description: "Add a new product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product data"
          required: true
          schema:
            $ref: "#/definitions/ProductCredentials"
      responses:
        201:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/Product"
          examples:
            application/json:
              id: 1
              name: "shoes"
              price: 20.99
              quantity: 200
              description: "nice pair of running shoes"
        400:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Unknown field. Missing data for required field."
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /products/update/id/{id}:
    put:
      tags:
      - "products"
      summary: "Update an existing product"
      description: "Update product by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Product object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product updated"
          schema:
            $ref: "#/definitions/Product"
          examples:
            application/json:
              id: 1
              name: "shoes"
              price: 20.99
              quantity: 200
              description: "nice pair of running shoes"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
      - bearerAuth: []
      - roleAuth: ['admin']

  /products/delete/id/{id}:
    delete:
      tags:
      - "products"
      summary: "Delete product by ID"
      description: "Delete product from database"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Product deleted"
          schema:
            $ref: "#/definitions/Product"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
        404:
          description: "Product not found"
          schema:
            $ref: "#/definitions/Error"
      security:
      - bearerAuth: []
      - roleAuth: ['admin']


  /orders/:
    get:
      tags:
        - "orders"
      summary: "Get All Orders Endpoint"
      description: "Retrieve a list of all orders"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number"
          required: false
          type: "integer"
          default: 1
        - name: "per_page"
          in: "query"
          description: "Number of items per page"
          required: false
          type: "integer"
          default: 10
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrdersResponse"
          examples:
            application/json:
              - customer_id: 1
                date: "2024-01-01"
                id: 1
                products:
                  - product:
                      description: "nice running shoes"
                      id: 1
                      name: "shoes"
                      price: 89.99
                      quantity: 48810
                    product_id: 1
                    quantity: 2
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /orders/id/{id}:
    get:
      tags:
      - "orders"
      summary: "Find order by ID"
      description: "Get order by ID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/OrderByIdResponse"
          examples:
            application/json:
              customer_id: 1
              date: "2024-01-01"
              id: 1
              products:
                - product:
                    description: "nice running shoes"
                    id: 1
                    name: "shoes"
                    price: 89.99
                    quantity: 48810
                  product_id: 1
                  quantity: 2
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
      security:
        - bearerAuth: []

  /orders/add-order:
    post:
      tags:
        - "orders"
      summary: "Add a New Order Endpoint"
      description: "Add a new order"
      parameters:
        - in: "body"
          name: "body"
          description: "Order data"
          required: true
          schema:
            $ref: "#/definitions/OrderCredentials"
      responses:
        201:
          description: "Order created successfully"
          schema:
            $ref: "#/definitions/OrdersResponse"
          examples:
            application/json:
              customer_id: 1
              date: "2024-01-01"
              id: 1
              products:
                - product:
                    description: "nice running shoes"
                    id: 1
                    name: "shoes"
                    price: 89.99
                    quantity: 48810
                  product_id: 1
                  quantity: 2
        400:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Unknown field. Missing data for required field."
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
      security:
        - bearerAuth: []


  /roles/:
    get:
      tags:
        - "roles"
      summary: "Get All Roles Endpoint"
      description: "Retrieve a list of all roles"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
          examples:
            application/json:
              - id: 1
                role_name: "admin"

        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']
  
  /roles/add-role:
    post:
      tags:
        - "roles"
      summary: "Add a New Role Endpoint"
      description: "Add a new role"
      parameters:
        - in: "body"
          name: "body"
          description: "Role data"
          required: true
          schema:
            $ref: "#/definitions/RoleCredentials"
      responses:
        201:
          description: "Role created successfully"
          schema:
            $ref: "#/definitions/Role"
          examples:
            application/json:
              id: 1
              role_name: "admin"
        400:
          description: "Validation Error"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "Unknown field. Missing data for required field."
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

  /roles/update/id/{id}:
    put:
      tags:
      - "roles"
      summary: "Update an existing role"
      description: "Updating role"
      operationId: "updateRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Role object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Role updated"
          schema:
            $ref: "#/definitions/Role"
          examples:
            application/json:
              id: 1
              role_name: "admin"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "token is missing | token has expired | invalid token"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json:
              value:
                status: "error"
                message: "User does not have required role"
      security:
        - bearerAuth: []
        - roleAuth: ['admin']

definitions:
  Customer:
    type: "object"
    properties:
      name:
        type: "string"
        description: "customer's name"
      email:
        type: "string"
        description: "customer's email"
      phone:
        type: "string"
        description: "customer's phone"
      id:
        type: "integer"
        format: "int64"
        description: "Customer's unique ID"
    required:
      - "name"
      - "email"
      - "phone"
      - "id"

  Product:
    type: "object"
    properties:
      name:
        type: "string"
        description: "products name"
      price:
        type: "number"
        format: "float"
        description: "price of the product"
      quantity:
        type: "integer"
        format: "int64"
        description: "amount of the product that is available"
      description:
        type: "string"
        description: "description of the product"
      id:
        type: "integer"
        format: "int64"
        description: "Products unique ID"
    required:
      - "name"
      - "price"
      - "quantity"
      - "description"
      - "id"

  Order:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        format: "int64"
        description: "Customer's unique ID"
      date:
        type: "string"
        format: "date"
        example: "2024-01-01"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            product_id:
              type: "integer"
              format: "int64"
              description: "Products unique ID"
            quantity:
              type: "integer"
              format: "int64"
              description: "amount of the product the customer wants to order"
      id:
        type: "integer"
        format: "int64"
        description: "Order's unique ID"

    required:
      - customer_id
      - date
      - products
      - "id"

  Role:
    type: "object"
    properties:
      role_name:
        type: "string"
        description: "name of the role"
      id:
        type: "integer"
        description: "Role's unique ID"
    required:
      - "role_name"
      - "id"

  CustomerAccount:
    type: "object"
    properties:
      username:
        type: "string"
        description: "name to be used for login"
      password:
        type: "string"
        format: "password"
        description: "password to be used for login"
      customer_id:
        type: "integer"
        format: "int64"
        description: "Customer unique ID"
      role:
        type: "string"
        description: "role of the user to allow access to various endpoints"
      id:
        type: "integer"
        format: "int64"
        description: "Role's unique ID" 
    required:
      - "username"
      - "password"
      - "customer_id"
      - "role"
      - "id"

  CustomerCredentials:
    type: "object"
    properties:
      name:
        type: "string"
        description: "name"
      email:
        type: "string"
        description: "customer's email"
      phone:
        type: "string"
        description: "customer's phone"
    required:
      - "name"
      - "email"
      - "phone"

  ProductCredentials:
    type: "object"
    properties:
      name:
        type: "string"
        description: "products name"
      price:
        type: "number"
        format: "float"
        description: "price of the product"
      quantity:
        type: "integer"
        format: "int64"
        description: "amount of the product that is available"
      description:
        type: "string"
        description: "description of product"
    required:
      - "name"
      - "price"
      - "quantity"
      - "description"

  OrderCredentials:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        format: "int64"
        description: "Customer's unique ID"
      date:
        type: "string"
        format: "date"
        example: "2024-01-01"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            product_id:
              type: "integer"
              format: "int64"
              description: "Products unique ID"
            quantity:
              type: "integer"
              format: "int64"
              description: "amount of the product the customer wants to order"
    required:
      - customer_id
      - date
      - products

  RoleCredentials:
    type: "object"
    properties:
      role_name:
        type: "string"
        description: "name of the role"
    required:
      - "role_name"

  CustomerAccountCredentials:
    type: "object"
    properties:
      username:
        type: "string"
        description: "name to be used for login"
      password:
        type: "string"
        format: "password"
        description: "password to be used for login"
      customer_id:
        type: "integer"
        format: "int64"
        description: "Customer unique ID"
      role:
        type: "string"
        description: "role of the user to allow access to various endpoints"
    required:
      - "username"
      - "password"
      - "customer_id"
      - "role"

  LoginCredentials:
    type: "object"
    properties:
      username:
        type: "string"
        description: "username"
      password:
        type: "string"
        format: "password"
        description: "Password"
    required:
      - "username"
      - "password"

  LoginResponse:
    type: "object"
    properties: 
      auth_token:
        type: "string"
        description: "Authentication token"
      message:
        type: "string"
        description: "Message indicating success or failure"
      status: 
        type: "string"
        description: "Status of the operation"
    required:
      - "auth_token"
      - "message"

  CreateAccountResponse:
    type: "object"
    properties: 
      customer:
        type: "object"
        $ref: "#/definitions/Customer" 
      username:
        type: "string"
        description: "name to be used for login"
      password:
        type: "string"
        format: "password"
        description: "password to be used for login"
      customer_id:
        type: "integer"
        format: "int64"
        description: "Customer unique ID"
      role:
        type: "string"
        description: "role of the user to allow access to various endpoints"
      id:
        type: "integer"
        format: "int64"
        description: "Role's unique ID" 
    required:
      - "customer"
      - "username"
      - "password"
      - "customer_id"
      - "role"
      - "id" 

  OrdersResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date"
        example: "2024-01-01"
      id:
        type: "integer"
        format: "int64"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            product:
              $ref: "#/definitions/ProductCredentials"
            product_id:
              type: "integer"
              format: "int64"
            quantity:
              type: "integer"
              format: "int64"

  OrderByIdResponse:
    type: "object"
    properties:
      customer:
        $ref: "#/definitions/Customer"
      date:
        type: "string"
        format: "date"
        example: "2024-01-01"
      id:
        type: "integer"
        format: "int64"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            quantity:
              type: "integer"
              format: "int64"
    required:
      - "customer"
      - "date"
      - "id"
      - "products"

  DeleteResponse:
    type: "object"
    properties: 
      message:
        type: "string"
        description: "Message indicating success or failure"
    required:
      - "message"

  Error:
    type: "object"
    properties:
      status:
        type: "string"
        description: "Status of the error"
      message:
        type: "string"
        description: "Description of the error"
    required:
      - "status"
      - "message"

